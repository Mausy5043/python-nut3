from typing import Any, Dict, List, Optional

class PyNUT3Error(Exception): ...

class PyNUT3Client:
    def __init__(self, host: str = ..., port: int = ..., login: Optional[str] = ..., password: Optional[str] = ..., timeout: float = ..., persistent: bool = ..., debug: bool = ...) -> None: ...
    def __del__(self) -> None: ...
    def __enter__(self) -> PyNUT3Client: ...
    def __exit__(self, exc_t: type, exc_v: IndexError, trace: Any) -> None: ...
    def description(self, ups: str) -> str: ...
    def get_dict_ups(self) -> Dict[str, str]: ...
    def get_dict_vars(self, ups: str) -> Dict[str, str]: ...
    def get_dict_commands(self, ups: str) -> Dict[str, str]: ...
    def get_dict_clients(self, ups: str = ...) -> Dict[str, List[str]]: ...
    def get_dict_rw_vars(self, ups: str) -> Dict[str, str]: ...
    def list_enum(self, ups: str, var: str) -> List[str]: ...
    def list_range(self, ups: str, var: str) -> List[str]: ...
    def set_var(self, ups: str, var: str, value: str) -> None: ...
    def get_var(self, ups: str, var: str) -> str: ...
    def get(self, ups: str, var: str) -> str: ...
    def var_description(self, ups: str, var: str) -> str: ...
    def var_type(self, ups: str, var: str) -> str: ...
    def command_description(self, ups: str, command: str) -> str: ...
    def run_command(self, ups: str, command: str) -> None: ...
    def fsd(self, ups: str) -> None: ...
    def num_logins(self, ups: str) -> int: ...
    def help(self) -> str: ...
    def ver(self) -> str: ...
